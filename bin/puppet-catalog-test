#!/usr/bin/env ruby

# allow loading library from workspace
$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))

require "puppet-catalog-test"
require "optparse"

options = {}

opt_parser = OptionParser.new do |opts|
  opts.banner = "USAGE: #{File.basename($0)} [options]"

  opts.on("-m", "--module-paths PATHS", "Location of puppet modules, separated by collon") do |arg|
    options[:module_paths] = arg.split(":")
  end

  opts.on("-M", "--manifest-path PATH", "Location of the puppet manifests (site.pp)") do |arg|
    options[:manifest_path] = arg
  end

  opts.on("-i", "--include-pattern PATTERN", "Include only test cases that match pattern") do |arg|
    options[:include_pattern] = arg
  end

  opts.on("-e", "--exclude-pattern PATTERN", "Exclude test cases that match pattern") do |arg|
    options[:exclude_pattern] = arg
  end

  opts.on("-s", "--scenario FILE", "Scenario definition to use") do |arg|
    options[:scenario] = arg
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

opt_parser.parse!

if options.empty?
  puts opt_parser.help
  exit
end

pct = PuppetCatalogTest::TestRunner.new(
  :manifest_path => options[:manifest_path],
  :module_paths => options[:module_paths])

filter = Filter.new
filter.include_pattern = options[:include_pattern] if options.has_key?(:include_pattern)
filter.exclude_pattern = options[:exclude_pattern] if options.has_key?(:exclude_pattern)

if options[:scenario]
  pct.load_scenario_yaml(options[:scenario], filter)
else
  pct.load_all(filter)
end

pct.run_tests!
